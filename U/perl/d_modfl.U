?RCS: $Id$
?RCS:
?RCS: Copyright (c) 2000 Jarkko Hietaniemi
?RCS:
?RCS: You may distribute under the terms of either the GNU General Public
?RCS: License or the Artistic License, as specified in the README file.
?RCS:
?MAKE:d_modfl: Inlibc Compile cat rm sPRIfldbl d_longdbl
?MAKE:	-pick add $@ %<
?S:d_modfl:
?S:	This variable conditionally defines the HAS_MODFL symbol, which
?S:	indicates to the C program that the modfl() routine is available.
?S:.
?C:HAS_MODFL:
?C:	This symbol, if defined, indicates that the modfl routine is
?C:	available to split a long double x into a fractional part f and
?C:	an integer part i such that |f| < 1.0 and (f + i) = x.
?C:.
?H:#$d_modfl HAS_MODFL		/**/
?H:.
?LINT:set d_modfl
?F:!try
?T:foo
: see if modfl exists
set modfl d_modfl
eval $inlibc

case "$d_longdbl$d_modfl" in
$define$define)
	$cat <<EOM
Checking to see whether your modfl() is okay for large values...
EOM
$cat >try.c <<EOCP
#include <math.h> 
#include <stdio.h>
int main() {
    long double nv = 4294967303.15;
    long double v, w;
    v = modfl(nv, &w);         
#ifdef __GLIBC__
    printf("glibc");
#endif
    printf(" %"$sPRIfldbl" %"$sPRIfldbl" %"$sPRIfldbl"\n", nv, v, w);
    return 0;
}
EOCP
	set try
	if eval $compile; then
		foo=`./try`
		case "$foo" in
		*" 4294967303.150000 1.150000 4294967302.000000")
			echo >&4 "Your modfl() is broken for large values."
			d_modfl="$undef"
			case "$foo" in
			glibc)	echo >&4 "You should upgrade your glibc to at least 2.2.2 to get a fixed modfl()."
			;;
			esac
			;;
		*" 4294967303.150000 0.150000 4294967303.000000")
			echo >&4 "Your modfl() seems okay for large values."
			;;
		*)	echo >&4 "I don't understand your modfl() at all."
			d_modfl="$undef"
			;;
		esac
		$rm -f try.* try core core.try.*
	else
		echo "I cannot figure out whether your modfl() is okay, assuming it isn't."
		d_modfl="$undef"
	fi
	;;
esac

