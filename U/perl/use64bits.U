?RCS: $Id$
?RCS:
?RCS: Copyright (c) 1998 Andy Dougherty
?RCS:
?RCS: You may distribute under the terms of either the GNU General Public
?RCS: License or the Artistic License, as specified in the README file.
?RCS:
?MAKE:use64bits usefull64bits archname64: Myread Oldconfig Setvar test \
	uselargefiles usemorebits longsize ccflags
?MAKE:	-pick add $@ %<
?Y:TOP
?S:use64bits:
?S:	This variable conditionally defines the USE_64_BITS symbol,
?S:	and indicates that 64-bit integer types should be used
?S:	when available.  The minimal possible 64-bitness
?S:	is employed, just enough to get 64-bit integers into Perl.
?S:	This may mean using for example "long longs", while your memory
?S:	may still be limited to 2 gigabytes.
?S:	To go all the way, use Configure -Dusefull64bits.
?S:.
?S:usefull64bits:
?S:	This variable conditionally defines the USE_FULL_64_BITS symbol,
?S:	and indicates that 64-bit integer types should be used
?S:	when available.  The maximal possible
?S:	64-bitness is employed: LP64 or ILP64, meaning that you will
?S:	be able to use more than 2 gigabytes of memory.  This mode is
?S:	even more binary incompatible than USE_64_BITS. You may not
?S:	be able to run the resulting executable in a 32-bit CPU at all or
?S:	you may need at least to reboot your OS to 64-bit mode.
?S:	Full a more minimal approach, use Configure -Duse64bits.
?S:.
?S:archname64:
?S:	This variable is used for the 64-bitness part of $archname.
?S:.
?C:USE_64_BITS:
?C:	This symbol, if defined, indicates that 64-bit integers should
?C:	be used when available.  If not defined, the native integers
?C:	will be employed (be they 32 or 64 bits).  The minimal possible
?C:	64-bitness is used, just enough to get 64-bit integers into Perl.
?C:	This may mean using for example "long longs", while your memory
?C:	may still be limited to 2 gigabytes.
?C:	To go all the way, use Configure -Dusefull64bits.
?C:.
?C:USE_FULL_64_BITS:
?C:	This symbol, if defined, indicates that 64-bit integers should
?C:	be used when available.  If not defined, the native integers
?C:	will be used (be they 32 or 64 bits).  The maximal possible
?C:	64-bitness is employed: LP64 or ILP64, meaning that you will
?C:	be able to use more than 2 gigabytes of memory.  This mode is
?C:	even more binary incompatible than USE_64_BITS. You may not
?C:	be able to run the resulting executable in a 32-bit CPU at all or
?C:	you may need at least to reboot your OS to 64-bit mode.
?C:	Full a more minimal approach, use Configure -Duse64bits.
?C:.
?H:?%<:#ifndef USE_64_BITS
?H:?%<:#$use64bits	USE_64_BITS		/**/
?H:?%<:#endif
?H:.
?H:?%<:#ifndef USE_FULL_64_BITS
?H:?%<:#$usefull64bits	USE_FULL_64_BITS		/**/
?H:?%<:#endif
?H:.
?LINT:set use64bits
?LINT:extern ccflags
?LINT:change ccflags
?LINT:use uselargefiles
?LINT:use usemorebits
?LINT:extern uselonglong
?LINT:use uselonglong
?LINT:extern usefull64bits
?LINT:change usefull64bits
?F:!use64bits.cbu
?F:!usefull64bits.cbu

# Backward compatibility (uselonglong is deprecated).
case "$uselonglong" in
"$define"|true|[yY]*)
	cat <<EOM >&4

*** Configure -Duselonglong is deprecated, using the -Duse64bits instead.

EOM
	use64bits="$define"
	;;
esac                          
case "$ccflags" in
*-DUSE_LONG_LONG*|*-DUSE_64_BITS*|*-DUSE_FULL_64_BITS*) use64bits="$define";;
esac
case "$usefull64bits" in
"$define"|true|[yY]*) use64bits="$define" ;;
esac

case "$longsize" in
8) cat <<EOM

You have natively 64-bit long integers.
EOM
   val="$define"
   ;;
*) case "$use64bits" in
   "$define"|true|[yY]*) dflt='y';;
   *) dflt='n';;
   esac
   cat <<EOM

Perl can be built to take advantage of 64-bit integer types
on some systems.  To do so, Configure can be run with -Duse64bits.
Choosing this option will most probably introduce binary incompatibilities.

If this doesn't make any sense to you, just accept the default '$dflt'.
EOM
   rp='Try to use 64-bit integers, if available?'
   . ./myread
   case "$ans" in
   [yY]*) val="$define" ;;
   *)     val="$undef"  ;;
   esac
   ;;
esac
set use64bits
eval $setvar

case "$usefull64bits" in
"$define"|true|[yY]*) val="$define" ;;
*)	case "$use64bits" in
	"$define")	case "$longsize" in
			4)	dflt='n'
				cat <<EOM

Since you chose 64-bitness you may want to try maximal 64-bitness.
What you have chosen is minimal 64-bitness which means just enough
to get 64-bit integers.  The maximal means using as much 64-bitness
as is possible on the platform.  This in turn means even more binary
incompatibilities.  On the other hand, your platform may not have
any more maximal 64-bitness than what you already have chosen.

If this doesn't make any sense to you, just accept the default '$dflt'.
EOM
				rp='Try to use full 64-bit support, if available?'
				. ./myread
				case "$ans" in
				[yY]*) val="$define" ;;
				*)     val="$undef"  ;;
				esac
				;;
			8) val="$define" ;;
			*) val="$undef" ;;
			esac
			;;
	*)	val="$undef" ;;
	esac
	;;
esac 
set usefull64bits
eval $setvar

case "$use64bits" in
"$define"|true|[yY]*)
: Look for a hint-file generated 'call-back-unit'.  If the
: user has specified that a 64-bit perl is to be built,
: we may need to set or change some other defaults.
	if $test -f use64bits.cbu; then
		echo "Your platform has some specific hints for 64-bit builds, using them..."
		. ./use64bits.cbu
	fi
	case "$longsize" in
	4) case "$ccflags" in
	   *-DUSE_64_BITS*) ;;
	   *) ccflags="$ccflags -DUSE_64_BITS";;
	   esac
	   case "$archname64" in
	   '') archname64=64 ;;
	   esac
	   ;;
	esac
	;;
esac

case "$usefull64bits" in
"$define"|true|[yY]*)
: Look for a hint-file generated 'call-back-unit'.  If the
: user has specified that a full 64-bit perl is to be built,
: we may need to set or change some other defaults.
	if $test -f usefull64bits.cbu; then
		echo "Your platform has some specific hints for full 64-bit builds, using them..."
		. ./usefull64bits.cbu
	fi
	case "$longsize" in
	4) case "$ccflags" in
	   *-DUSE_FULL_64_BITS*) ;;
      	   *) ccflags="$ccflags -DUSE_FULL_64_BITS";;
	   esac
	   case "$archname64" in
	   ''|64) archname64=full64 ;;
	   esac
	   ;;
	esac
	;;
esac

