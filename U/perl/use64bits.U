?RCS: $Id$
?RCS:
?RCS: Copyright (c) 1998 Andy Dougherty
?RCS:
?RCS: You may distribute under the terms of either the GNU General Public
?RCS: License or the Artistic License, as specified in the README file.
?RCS:
?MAKE:use64bits archname64: Myread Oldconfig Setvar test \
	uselargefiles usemorebits longsize ccflags
?MAKE:	-pick add $@ %<
?Y:TOP
?S:use64bits:
?S:	This variable conditionally defines the USE_64_BITS symbol,
?S:	and indicates that 64-bit integer types should be used
?S:	when available.
?S:.
?S:archname64:
?S:	This variable is used for the 64-bitness part of $archname.
?S:.
?C:USE_64_BITS:
?C:	This symbol, if defined, indicates that 64-bit integers should
?C:	be used when available.  If not defined, the native integers
?C:	will be used (be they 32 or 64 bits).
?C:.
?H:?%<:#ifndef USE_64_BITS
?H:?%<:#$use64bits	USE_64_BITS		/**/
?H:?%<:#endif
?H:.
?LINT:set use64bits
?LINT:extern ccflags
?LINT:change ccflags
?LINT:use uselargefiles
?LINT:use usemorebits
?LINT:extern uselonglong
?LINT:use uselonglong
?LINT:extern usefull64bits
?LINT:change usefull64bits
?F:!use64bits.cbu

# Backward compatibility (uselonglong is deprecated).
case "$uselonglong" in
"$define"|true|[yY]*)
	cat <<EOM >&4

*** Configure -Duselonglong is deprecated, using the -Duse64bits instead.

EOM
	use64bits="$define"
	;;
esac                          
case "$ccflags" in
*-DUSE_LONG_LONG*|*-DUSE_64_BITS*|*-DUSE_FULL_64_BITS*) use64bits="$define";;
esac
case "$usefull64bits" in
"$define"|true|[yY]*) use64bits="$define" ;;
esac

case "$longsize" in
8) cat <<EOM

You have natively 64-bit long integers.
EOM
   val="$define"
   ;;
*) case "$use64bits" in
   "$define"|true|[yY]*) dflt='y';;
   *) dflt='n';;
   esac
cat <<EOM

Perl can be built to take advantage of 64-bit integer types
on some systems.  To do so, Configure can be run with -Duse64bits.

If this doesn't make any sense to you, just accept the default '$dflt'.
EOM
   rp='Try to use 64-bit integers, if available?'
   . ./myread
   case "$ans" in
   [yY]*) val="$define" ;;
   *)     val="$undef"  ;;
   esac
   ;;
esac
set use64bits
eval $setvar

case "$use64bits" in
"$define"|true|[yY]*)
: Look for a hint-file generated 'call-back-unit'.  If the
: user has specified that a 64-bit perl is to be built,
: we may need to set or change some other defaults.
	if $test -f use64bits.cbu; then
		echo "Your platform has some specific hints for 64-bit builds, using them..."
		. ./use64bits.cbu
	fi
	case "$ccflags" in
	*-DUSE_64_BITS*) ;;
	*) ccflags="$ccflags -DUSE_64_BITS";;
	esac
	case "$usefull64bits" in
	"$define"|true|[yY]*)
		case "$ccflags" in
		*-DUSE_FULL_64_BITS*) ;;
		*) ccflags="$ccflags -DUSE_FULL_64_BITS";;
		esac
		;;
	esac
	archname64=64
	;;
esac

case "$use64bits" in
"$define"|true|[yY]*) use64bits="$define" ;;
*) use64bits="$undef" ;;
esac
case "$usefull64bits" in
"$define"|true|[yY]*) usefull64bits="$define" ;;
*) usefull64bits="$undef" ;;
esac

