?RCS: $Id$
?RCS:
?RCS: Copyright (c) 1999 Jarkko Hietaniemi
?RCS:
?RCS: You may distribute under the terms of either the GNU General Public
?RCS: License or the Artistic License, as specified in the README file.
?RCS:
?MAKE:d_quad quadtype uquadtype quadkind: \
	longsize intsize d_longlong longlongsize uselonglong d_int64t \
	Inhdr Setvar
?MAKE:	-pick add $@ %<
?S:d_quad:
?S:	This variable, if defined, tells that there's a 64-bit integer type,
?S:	quadtype.
?S:.
?S:quadtype:
?S:	This variable defines Quad_t to be something like long, int, 
?S:	long long, int64_t, or whatever type is used for 64-bit integers.
?S:.
?S:quadkind:
?S:	This variable, if defined, encodes the type of a quad:
?S:	1 = int, 2 = long, 3 = long long, 4 = int64_t.
?S:.
?S:uquadtype:
?S:	This variable defines Uquad_t to be something like unsigned long,
?S:	unsigned int, unsigned long long, uint64_t, or whatever type is
?S:	used for 64-bit integers.
?S:.
?C:HAS_QUAD:
?C:	This symbol, if defined, tells that there's a 64-bit integer type,
?C:	Quad_t.
?C:.
?C:Quad_t:
?C:	This symbol holds the type used for 64-bit integers.
?C:	It can be int, long, long long, int64_t etc...
?C:.
?C:QUADKIND:
?C:	This symbol, if defined, encodes the type of a quad:
?C:	1 = int, 2 = long, 3 = long long, 4 = int64_t.
?C:.
?C:Uquad_t:
?C:	This symbol holds the type used for unsigned 64-bit integers.
?C:	It can be unsigned int, unsigned long, unsigned long long,
?C:	uint64_t etc...
?C:.
?H:#$d_quad HAS_QUAD	/**/
?H:#$d_quad Quad_t $quadtype	/**/
?H:#$d_quad Uquad_t $uquadtype	/**/
?H:?%<:#ifdef HAS_QUAD
?H:?%<:#   define QUADKIND $quadkind	/**/
?H:?%<:#   define QUAD_IS_INT	1
?H:?%<:#   define QUAD_IS_LONG	2
?H:?%<:#   define QUAD_IS_LONG_LONG	3
?H:?%<:#   define QUAD_IS_INT64_T	4
?H:?%<:#endif
?H:.
?LINT:set quadtype
?LINT:set uquadtype

echo " "
echo "Checking which 64-bit integer type we could use..." >&4

case "$intsize" in
8) val=int
   set quadtype
   eval $setvar
   val='"unsigned int"'
   set uquadtype
   eval $setvar
   quadkind=1
   ;;
*) case "$longsize" in
   8) val=long
      set quadtype
      eval $setvar
      val='"unsigned long"'
      set uquadtype
      eval $setvar
      quadkind=2
      ;;
   *) case "$uselonglong:$d_longlong:$longlongsize" in
      define:define:8)
        val='"long long"'
        set quadtype
        eval $setvar
        val='"unsigned long long"'
        set uquadtype
        eval $setvar
        quadkind=3
        ;;
      *) case "$d_int64t" in
         define)
           val=int64_t
           set quadtype
           eval $setvar
           val=uint64_t
           set uquadtype
           eval $setvar
           quadkind=4
           ;;
         esac
         ;;
      esac
      ;;
   esac
   ;;
esac

case "$quadtype" in
'')	case "$uselonglong:$d_longlong:$longlongsize" in
	undef:define:8)
	   echo "(You would have 'long long', but you are not using it.)" >&4 ;;
	*) echo "Alas, no 64-bit integer types in sight." >&4 ;;
	esac
	d_quad="$undef"
	;;
*)	echo "We could use '$quadtype' for 64-bit integers." >&4
	d_quad="$define"
	;;
esac

