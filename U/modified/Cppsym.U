?RCS: $Id: Cppsym.U,v 3.0.1.5 1995/05/12 11:59:11 ram Exp $
?RCS:
?RCS: Copyright (c) 1991-1993, Raphael Manfredi
?RCS: 
?RCS: You may redistribute only under the terms of the Artistic Licence,
?RCS: as specified in the README file that comes with the distribution.
?RCS: You may reuse parts of this distribution only within the terms of
?RCS: that same Artistic Licence; a copy of which may be found at the root
?RCS: of the source tree for dist 3.0.
?RCS:
?RCS: $Log: Cppsym.U,v $
?RCS: Revision 3.0.1.5  1995/05/12  11:59:11  ram
?RCS: patch54: split awk command onto two lines for older awks (ADO)
?RCS:
?RCS: Revision 3.0.1.4  1995/01/11  14:55:57  ram
?RCS: patch45: new cc vs. cpp symbol checking suggested by JHI
?RCS: patch45: added more cpp symbols (JHI)
?RCS:
?RCS: Revision 3.0.1.3  1994/10/29  15:51:32  ram
?RCS: patch36: added ?F: line for metalint file checking
?RCS: patch36: new symbols ardent and titan (ADO)
?RCS:
?RCS: Revision 3.0.1.2  1994/06/20  06:53:32  ram
?RCS: patch30: extended cpp symbol lookup list (JHI)
?RCS: patch30: renamed attrlist symbol into al for brevity
?RCS:
?RCS: Revision 3.0.1.1  1993/12/15  08:14:14  ram
?RCS: patch15: added new cpp symbols __bsdi__ and BSD_NET2
?RCS:
?RCS: Revision 3.0  1993/08/18  12:04:50  ram
?RCS: Baseline for dist 3.0 netwide release.
?RCS:
?X: 
?X: This unit produces a shell script called Cppsym, which can be used to
?X: determine whether any in a list of symbols is defined by the C compilation
?X: chain (C preprocessor symbols plus C compiler native ones).
?X: It can determine the status of any symbol, though the symbols in $al
?X: are more easily determined.  If you want to add to $al you can do
?X: it in Myinit.U.
?X: 
?MAKE:Cppsym ccsymbols cppsymbols cppccsymbols: \
	eunicefix Guess cppstdin awk cat tr sed sort grep rm startsh osname \
	contains cppminus +cc +gccversion test comm uniq echo n c Options trnl
?MAKE:	-pick add $@ %<
?F:./Cppsym
?T:sym list unknown status also symbols i postprocess_cc_v
?V:al
?X:
?X: The symbol list is in alpha order for ease of maintenance...
?X:
?X: Lots of new symbols (mostly rummaged from gcc), courtesy of
?X: Jarkko Hietaniemi <jhi@snakemail.hut.fi> -- RAM, 06/06/94
?X:
?INIT:: list of known cpp symbols, sorted alphabetically
?INIT:al="a29k ABI64 aegis AES_SOURCE AIX AIX32 AIX370"
?INIT:al="$al AIX41 AIX42 AIX43 AIX_SOURCE aixpc ALL_SOURCE"
?INIT:al="$al alliant alpha am29000 AM29000 amiga AMIGAOS AMIX"
?INIT:al="$al ansi ANSI_C_SOURCE apollo ardent atarist att386 att3b BeOS"
?INIT:al="$al BIG_ENDIAN BIT_MSF bsd BSD bsd43 bsd4_2 bsd4_3 BSD4_3 bsd4_4"
?INIT:al="$al BSD_4_3 BSD_4_4 BSD_NET2 BSD_TIME BSD_TYPES BSDCOMPAT bsdi"
?INIT:al="$al bull c cadmus clipper CMU COFF COMPILER_VERSION"
?INIT:al="$al concurrent convex cpu cray CRAY CRAYMPP ctix CX_UX"
?INIT:al="$al CYGWIN DGUX DGUX_SOURCE DJGPP dmert DOLPHIN DPX2 DSO"
?INIT:al="$al Dynix DynixPTX ELF encore EPI EXTENSIONS FILE_OFFSET_BITS"
?INIT:al="$al FreeBSD GCC_NEW_VARARGS gcos gcx gimpel"
?INIT:al="$al GNU_SOURCE GNUC GNUC_MINOR GO32 gould GOULD_PN"
?INIT:al="$al H3050R H3050RX hbullx20 hcx host_mips"
?INIT:al="$al hp200 hp300 hp700 HP700 hp800 hp9000"
?INIT:al="$al hp9000s200 hp9000s300 hp9000s400 hp9000s500"
?INIT:al="$al hp9000s700 hp9000s800 hp9k8 hp_osf hppa hpux HPUX_SOURCE"
?INIT:al="$al i186 i286 i386 i486 i586 i686 i8086 i80960 i860 I960"
?INIT:al="$al iAPX286 ibm ibm032 ibmesa IBMR2 ibmrt ILP32 ILP64"
?INIT:al="$al INLINE_INTRINSICS INTRINSICS INT64 interdata is68k ksr1"
?INIT:al="$al LANGUAGE_C LARGE_FILE_API LARGEFILE64_SOURCE"
?INIT:al="$al LARGEFILE_SOURCE LFS64_LARGEFILE LFS_LARGEFILE"
?INIT:al="$al Linux LITTLE_ENDIAN LONG64 LONG_DOUBLE LONG_LONG"
?INIT:al="$al LONGDOUBLE LONGLONG LP64 luna luna88k Lynx"
?INIT:al="$al M68000 m68k m88100 m88k M88KBCS_TARGET M_COFF"
?INIT:al="$al M_I186 M_I286 M_I386 M_I8086 M_I86 M_I86SM M_SYS3"
?INIT:al="$al M_SYS5 M_SYSIII M_SYSV M_UNIX M_XENIX MACH machine MachTen"
?INIT:al="$al MATH_HAS_NO_SIDE_EFFECTS"
?INIT:al="$al mc300 mc500 mc68000 mc68010 mc68020 mc68030 mc68040"
?INIT:al="$al mc68060 mc68k mc68k32 mc700 mc88000 mc88100 merlin"
?INIT:al="$al mert MiNT mips MIPS_FPSET MIPS_ISA MIPS_SIM MIPS_SZINT"
?INIT:al="$al MIPS_SZLONG MIPS_SZPTR MIPSEB MIPSEL MODERN_C motorola"
?INIT:al="$al mpeix MSDOS MTXINU MULTIMAX mvs MVS n16 ncl_el ncl_mr"
?INIT:al="$al NetBSD news1500 news1700 news1800 news1900 news3700"
?INIT:al="$al news700 news800 news900 NeXT NLS ns16000 ns32000"
?INIT:al="$al ns32016 ns32332 ns32k nsc32000"
?INIT:al="$al OCS88 OEMVS OpenBSD os OS2 OS390 osf OSF1 OSF_SOURCE"
?INIT:al="$al pa_risc PA_RISC1_1 PA_RISC2_0 PARAGON parisc"
?INIT:al="$al pc532 pdp11 PGC PIC plexus PORTAR posix"
?INIT:al="$al POSIX1B_SOURCE POSIX2_SOURCE POSIX4_SOURCE"
?INIT:al="$al POSIX_C_SOURCE POSIX_SOURCE POWER"
?INIT:al="$al PROTOTYPES PWB pyr QNX R3000 REENTRANT RES Rhapsody RISC6000"
?INIT:al="$al riscix riscos RT scs SCO sequent sgi SGI_SOURCE sinix"
?INIT:al="$al SIZE_INT SIZE_LONG SIZE_PTR SOCKET_SOURCE SOCKETS_SOURCE"
?INIT:al="$al sony sony_news sonyrisc sparc sparclite spectrum"
?INIT:al="$al stardent stdc STDC_EXT stratos sun sun3 sun386"
?INIT:al="$al Sun386i svr3 svr4 SVR4_2 SVR4_SOURCE svr5"
?INIT:al="$al SX system SYSTYPE_BSD SYSTYPE_BSD43 SYSTYPE_BSD44"
?INIT:al="$al SYSTYPE_SVR4 SYSTYPE_SVR5 SYSTYPE_SYSV SYSV SYSV3 SYSV4 SYSV5"
?INIT:al="$al sysV68 sysV88 Tek4132 Tek4300 titan"
?INIT:al="$al tower tower32 tower32_200 tower32_600 tower32_700"
?INIT:al="$al tower32_800 tower32_850 tss"
?INIT:al="$al u370 u3b u3b2 u3b20 u3b200 u3b20d u3b5"
?INIT:al="$al ultrix UMAXV UnicomPBB UnicomPBD UNICOS UNICOSMK"
?INIT:al="$al unix UNIX95 UNIX99 unixpc unos USGr4 USGr4_2"
?INIT:al="$al Utek UTek UTS UWIN uxpm uxps vax venix VMESA vms xenix Xenix286"
?INIT:al="$al XOPEN_SOURCE XOPEN_SOURCE_EXTENDED XPG2 XPG2_EXTENDED"
?INIT:al="$al XPG3 XPG3_EXTENDED XPG4 XPG4_EXTENDED"
?INIT:al="$al z8000"
?INIT:
?S:ccsymbols:
?S:	The variable contains the symbols defined by the C compiler alone.
?S:	The symbols defined by cpp or by cc when it calls cpp are not in
?S:	this list, see cppsymbols and cppccsymbols.
?S:	The list is a space-separated list of symbol=value tokens.
?S:.
?S:cppsymbols:
?S:	The variable contains the symbols defined by the C preprocessor
?S:	alone.  The symbols defined by cc or by cc when it calls cpp are
?S:	not in this list, see ccsymbols and cppccsymbols.
?S:	The list is a space-separated list of symbol=value tokens.
?S:.
?S:cppccsymbols:
?S:	The variable contains the symbols defined by the C compiler
?S:	when it calls cpp.  The symbols defined by the cc alone or cpp
?S:	alone are not in this list, see ccsymbols and cppsymbols.
?S:	The list is a space-separated list of symbol=value tokens.
?S:.
?F:!Cppsym.true
?F:!ccsym.com
?F:!ccsym.cpp
?F:!ccsym.own
?T:startsym
?T:stopsym
?T:symbols
: get C preprocessor symbols handy
echo " "
$echo "Guessing which symbols your C compiler and preprocessor define..." >&4 
?X: The following used to be tr '[ - ]' ... but this was rejected by AIX 3.2
?X: since the endpoints where the same (from patch 12u8 to patch).
echo $al $osname | $tr ' ' $trnl >Cppsym.know
./tr '[a-z]' '[A-Z]' < Cppsym.know > Cppsym.a
./tr '[A-Z]' '[a-z]' < Cppsym.know > Cppsym.b
cat Cppsym.a Cppsym.b >> Cppsym.know
$sed 's/^/_/'           < Cppsym.know > Cppsym.a
$sed 's/^/__/'          < Cppsym.know > Cppsym.b
$sed 's/\(.*\)/__\1__/' < Cppsym.know > Cppsym.c
$cat Cppsym.know Cppsym.a Cppsym.b Cppsym.c | sort | uniq > Cppsym.d
mv Cppsym.d Cppsym.know
rm Cppsym.?
$cat <<EOSS >Cppsym
$startsh
case "\$1" in
-l) list=true
	shift
	;;
esac
unknown=''
case "\$list\$#" in
1|2)
	for sym do
		if $contains "^\$1$" Cppsym.true >/dev/null 2>&1; then
			exit 0
		elif $contains "^\$1$" Cppsym.know >/dev/null 2>&1; then
			:
		else
			unknown="\$unknown \$sym"
		fi
	done
	set X \$unknown
	shift
	;;
esac
case \$# in
0) exit 1;;
esac
echo \$* | $tr ' ' '$trnl' | $sed -e 's/\(.*\)/\\
#ifdef \1\\
exit 0; _ _ _ _\1\\	 \1\\
#endif\\
/' >Cppsym\$\$
echo "exit 1; _ _ _" >>Cppsym\$\$
$cppstdin $cppminus <Cppsym\$\$ | $grep '^exit [01]; _ _'  >Cppsym2\$\$
case "\$list" in
true) $awk 'NF > 5 {print substr(\$6,2,100)}' <Cppsym2\$\$ ;;
*)
	sh Cppsym2\$\$
	status=\$?
	;;
esac
$rm -f Cppsym\$\$ Cppsym2\$\$
exit \$status
EOSS
chmod +x Cppsym
$eunicefix Cppsym
$rm -f Cppsym.true
startsym=1
stopsym=500
symbols=`wc -l < Cppsym.know`
while test $startsym -le $symbols
do
    $sed -n "$startsym,$stopsym p" Cppsym.know > Cppsym.batch
    ./Cppsym -l `cat Cppsym.batch` | $sort | $grep -v '^$' >>Cppsym.true
    startsym=`expr $startsym + 500`
    stopsym=`expr $stopsym + 500`
done
$rm -f Cppsym.batch

: now check the C compiler for additional symbols
?X: suggested by Jarkko Hietaniemi <jhi@snakemail.hut.fi>, thanks!
postprocess_cc_v=''
case "$osname" in
aix) postprocess_cc_v="|$tr , ' '" ;;
esac
$cat >ccsym <<EOS
$startsh
$cat >tmp.c <<EOF
extern int foo;
EOF
for i in \`$cc -v -c tmp.c 2>&1 $postprocess_cc_v\`
do
	case "\$i" in
	-D*) echo "\$i" | $sed 's/^-D//';;
	-A*) $test "$gccversion" && echo "\$i" | $sed 's/^-A\(.*\)(\(.*\))/\1=\2/';;
	esac
done
$rm -f try.c
EOS
postprocess_cc_v=''
chmod +x ccsym
$eunicefix ccsym
./ccsym > ccsym1.raw
?X: AIX complains if $uniq is passed an empty file.  ($sort apparently
?X: doesn't care.)  --AD  14 July 1998
if $test -s ccsym1.raw; then
       $sort ccsym1.raw | $uniq >ccsym.raw
else
       mv ccsym1.raw ccsym.raw
fi

?X: canonicalize symbols for easier sort/uniq/comm usage: append =1 if no = sign
?X: the awk script must be on two lines for older awk programs, sigh! -- ADO
$awk '/\=/ { print $0; next }
	{ print $0"=1" }' ccsym.raw >ccsym.list
$awk '{ print $0"=1" }' Cppsym.true >ccsym.true
$comm -13 ccsym.true ccsym.list >ccsym.own
$comm -12 ccsym.true ccsym.list >ccsym.com
$comm -23 ccsym.true ccsym.list >ccsym.cpp
also=''
if $test -z ccsym.raw; then
	echo "Your C compiler doesn't seem to define any symbols!" >&4
	echo " "
	echo "However, your C preprocessor defines the following symbols:"
	$cat Cppsym.true
    	ccsymbols=''
	cppsymbols=`$cat Cppsym.true`
        cppsymbols=`echo $cppsymbols`
	cppccsymbols="$cppsymbols"
else
	if $test -s ccsym.com; then
		echo "Your C compiler and pre-processor define these symbols:"
		$sed -e 's/\(.*\)=.*/\1/' ccsym.com
		also='also '
		symbols='ones'
		cppccsymbols=`$cat ccsym.com`
		cppccsymbols=`echo $cppccsymbols`
		$test "$silent" || sleep 1
	fi
	if $test -s ccsym.cpp; then
		$test "$also" && echo " "
		echo "Your C pre-processor ${also}defines the following symbols:"
		$sed -e 's/\(.*\)=.*/\1/' ccsym.cpp
		also='further '
		cppsymbols=`$cat ccsym.cpp`
		cppsymbols=`echo $cppsymbols`
		$test "$silent" || sleep 1
	fi
	if $test -s ccsym.own; then
		$test "$also" && echo " "
		echo "Your C compiler ${also}defines the following cpp symbols:"
		$sed -e 's/\(.*\)=1/\1/' ccsym.own
		$sed -e 's/\(.*\)=.*/\1/' ccsym.own | $uniq >>Cppsym.true
	        ccsymbols=`$cat ccsym.own`
	        ccsymbols=`echo $ccsymbols`
		$test "$silent" || sleep 1
	fi
fi
$rm -f ccsym*

