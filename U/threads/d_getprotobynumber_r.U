?MAKE:d_getprotobynumber_r getprotobynumber_r_proto: Inlibc Protochk i_systypes i_netdb
?MAKE:	-pick add $@ %<
?S:d_getprotobynumber_r:
?S:	This variable conditionally defines the HAS_GETPROTOBYNUMBER_R symbol,
?S:	which indicates to the C program that the getprotobynumber_r()
?S:	routine is available.
?S:.
?S:getprotobynumber_r_proto:
?S:	This variable encodes the prototype of getprotobynumber_r.
?S:.
?C:HAS_GETPROTOBYNUMBER_R:
?C:	This symbol, if defined, indicates that the getprotobynumber_r routine
?C:	is available to getprotobynumber re-entrantly.
?C:.
?C:GETPROTOBYNUMBER_R_PROTO:
?C:	This symbol encodes the prototype of getprotobynumber_r.
?C:.
?H:#$d_getprotobynumber_r HAS_GETPROTOBYNUMBER_R	   /**/
?H:#define GETPROTOBYNUMBER_R_PROTO $getprotobynumber_r_proto	   /**/
?H:.
?T:try hdrs
?LINT:set d_getprotobynumber_r
?LINT:set getprotobynumber_r_proto
: see if getprotobynumber_r exists
set getprotobynumber_r d_getprotobynumber_r
eval $inlibc
case "$d_getprotobynumber_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_netdb netdb.h"
	case "$getprotobynumber_r_proto" in
	'') try='int getprotobynumber_r(int, struct protoent*, char*, size_t, struct protoent**);'
	./protochk "extern $try" $hdrs && getprotobynumber_r_proto=I_ISBWR ;;
	esac
	case "$getprotobynumber_r_proto" in
	'') try='struct protoent* getprotobynumber_r(int, struct protoent*, char*, int);'
	./protochk "extern $try" $hdrs && getprotobynumber_r_proto=S_ISBI ;;
	esac
	case "$getprotobynumber_r_proto" in
	'') try='int getprotobynumber_r(int, struct protoent*, struct protoent_data*);'
	./protochk "extern $try" $hdrs && getprotobynumber_r_proto=I_ISD ;;
	esac
	case "$getprotobynumber_r_proto" in
	'')	d_getprotobynumber_r=undef
		echo "Disabling getprotobynumber_r, cannot determine prototype." ;;
	* )	case "$getprotobynumber_r_proto" in
		REENTRANT_PROTO*) ;;
		*) getprotobynumber_r_proto="REENTRANT_PROTO_$getprotobynumber_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
esac

