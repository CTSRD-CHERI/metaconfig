?MAKE:d_getpwent_r getpwent_r_proto: Inlibc Protochk i_systypes i_dirent
?MAKE:  -pick add $@ %<
?S:d_getpwent_r:
?S:     This variable conditionally defines the HAS_GETPWENT_R symbol,
?S:     which indicates to the C program that the getpwent_r()
?S:     routine is available.
?S:.
?S:getpwent_r_proto:
?S:     This variable encodes the prototype of getpwent_r.
?S:.
?C:HAS_GETPWENT_R:
?C:     This symbol, if defined, indicates that the getpwent_r routine
?C:     is available to getpwent re-entrantly.
?C:.
?C:GETPWENT_R_PROTO:
?C:     This symbol encodes the prototype of getpwent_r.
?C:.
?H:#$d_getpwent_r HAS_GETPWENT_R          /**/
?H:#define GETPWENT_R_PROTO $getpwent_r_proto     /**/
?H:.
?T:try hdrs
?LINT:set d_getpwent_r
?LINT:set getpwent_r_proto
: see if getpwent_r exists
set getpwent_r d_getpwent_r
eval $inlibc
case "$d_getpwent_r" in
"$define")
	hdrs="$i_systypes sys/types.h ${i}_pwd pwd.h"
	case "$getpwent_r_proto" in
	'')	try='extern int getpwent_r(struct passwd*, char*, size_t, struct passwd**);'
		./protochk "$try" $hdrs && getpwent_r_proto=I_SBWR;
	;;
	esac
	case "$getpwent_r_proto" in
	'')	try='extern int getpwent_r(struct passwd*, char*, int, struct passwd**);'
		./protochk "$try" $hdrs && getpwent_r_proto=I_SBIR;
	;;
	esac
	case "$getpwent_r_proto" in
	'')	try='extern int getpwent_r(struct passwd*, char*, int);'
		./protochk "$try" $hdrs && getpwent_r_proto=I_SBI;
	;;
	esac
	case "$getpwent_r_proto" in
	'')	try='extern int getpwent_r(struct passwd*, char*, int, FILE**);'
		./protochk "$try" $hdrs && getpwent_r_proto=I_SBIH;
	;;
	esac
	case "$getpwent_r_proto" in
	'') d_getpwent_r=undef ; echo "Disabling getpwent_r, cannot find prototype." ;;
	* ) getpwent_r_proto="REENTRANT_$getpwent_r_proto" ; echo "$try" ;;
	esac
	;;
esac

