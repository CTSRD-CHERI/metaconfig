?MAKE:d_endhostent_r endhostent_r_proto: Inlibc Protochk i_systypes i_netdb
?MAKE:  -pick add $@ %<
?S:d_endhostent_r:
?S:     This variable conditionally defines the HAS_ENDHOSTENT_R symbol,
?S:     which indicates to the C program that the endhostent_r()
?S:     routine is available.
?S:.
?S:endhostent_r_proto:
?S:     This variable encodes the prototype of endhostent_r.
?S:.
?C:HAS_ENDHOSTENT_R:
?C:     This symbol, if defined, indicates that the endhostent_r routine
?C:     is available to endhostent re-entrantly.
?C:.
?C:ENDHOSTENT_R_PROTO:
?C:     This symbol encodes the prototype of endhostent_r.
?C:.
?H:#$d_endhostent_r HAS_ENDHOSTENT_R          /**/
?H:#define ENDHOSTENT_R_PROTO $endhostent_r_proto     /**/
?H:.
?T:try hdrs
?LINT:set d_endhostent_r
?LINT:set endhostent_r_proto
: see if endhostent_r exists
set endhostent_r d_endhostent_r
eval $inlibc
case "$d_endhostent_r" in
"$define")
	hdrs="$i_systypes sys/types.h $i_netdb netdb.h"
	case "$endhostent_r_proto" in
	'')	try='extern int endhostent_r(struct hostent_data*);'
		./protochk "$try" $hdrs && endhostent_r_proto=I_S;
	;;
	esac
	case "$endhostent_r_proto" in
	'')	try='extern void endhostent_r(struct hostent_data*);'
		./protochk "$try" $hdrs && endhostent_r_proto=V_S;
	;;
	esac
	case "$endhostent_r_proto" in
	'') d_endhostent_r=undef ; echo "Disabling endhostent_r, cannot find prototype." ;;
	* ) endhostent_r_proto="REENTRANT_$endhostent_r_proto" ; echo "$try" ;;
	esac
	;;
esac

