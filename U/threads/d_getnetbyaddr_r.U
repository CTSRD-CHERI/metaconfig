?MAKE:d_getnetbyaddr_r getnetbyaddr_r_proto: Inlibc Protochk i_systypes i_dirent
?MAKE:  -pick add $@ %<
?S:d_getnetbyaddr_r:
?S:     This variable conditionally defines the HAS_GETNETBYADDR_R symbol,
?S:     which indicates to the C program that the getnetbyaddr_r()
?S:     routine is available.
?S:.
?S:getnetbyaddr_r_proto:
?S:     This variable encodes the prototype of getnetbyaddr_r.
?S:.
?C:HAS_GETNETBYADDR_R:
?C:     This symbol, if defined, indicates that the getnetbyaddr_r routine
?C:     is available to getnetbyaddr re-entrantly.
?C:.
?C:GETNETBYADDR_R_PROTO:
?C:     This symbol encodes the prototype of getnetbyaddr_r.
?C:.
?H:#$d_getnetbyaddr_r HAS_GETNETBYADDR_R          /**/
?H:#define GETNETBYADDR_R_PROTO $getnetbyaddr_r_proto     /**/
?H:.
?T:try hdrs
?LINT:set d_getnetbyaddr_r
?LINT:set getnetbyaddr_r_proto
: see if getnetbyaddr_r exists
set getnetbyaddr_r d_getnetbyaddr_r
eval $inlibc
case "$d_getnetbyaddr_r" in
"$define")
	hdrs="$i_systypes sys/types.h ${i}_netdb netdb.h"
	case "$getnetbyaddr_r_proto" in
	'')	try='extern int getnetbyaddr_r(long, int, struct netent*, char*, size_t, struct netent**, int*);'
		./protochk "$try" $hdrs && getnetbyaddr_r_proto=I_LISBWRE;
	;;
	esac
	case "$getnetbyaddr_r_proto" in
	'')	try='extern int getnetbyaddr_r(long, int, struct netent*, char*, int);'
		./protochk "$try" $hdrs && getnetbyaddr_r_proto=I_LISBI;
	;;
	esac
	case "$getnetbyaddr_r_proto" in
	'')	try='extern int getnetbyaddr_r(int, int, struct netent*, struct netent_data*);'
		./protochk "$try" $hdrs && getnetbyaddr_r_proto=I_IISD;
	;;
	esac
	case "$getnetbyaddr_r_proto" in
	'') d_getnetbyaddr_r=undef ; echo "Disabling getnetbyaddr_r, cannot find prototype." ;;
	* ) getnetbyaddr_r_proto="REENTRANT_$getnetbyaddr_r_proto" ; echo "$try" ;;
	esac
	;;
esac

