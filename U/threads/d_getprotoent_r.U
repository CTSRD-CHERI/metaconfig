?MAKE:d_getprotoent_r getprotoent_r_proto: Inlibc Protochk i_systypes i_unistd
?MAKE:	-pick add $@ %<
?S:d_getprotoent_r:
?S:	This variable conditionally defines the HAS_GETPROTOENT_R symbol,
?S:	which indicates to the C program that the getprotoent_r()
?S:	routine is available.
?S:.
?S:getprotoent_r_proto:
?S:	This variable encodes the prototype of getprotoent_r.
?S:.
?C:HAS_GETPROTOENT_R:
?C:	This symbol, if defined, indicates that the getprotoent_r routine
?C:	is available to getprotoent re-entrantly.
?C:.
?C:GETPROTOENT_R_PROTO:
?C:	This symbol encodes the prototype of getprotoent_r.
?C:.
?H:#$d_getprotoent_r HAS_GETPROTOENT_R	   /**/
?H:#define GETPROTOENT_R_PROTO $getprotoent_r_proto	   /**/
?H:.
?T:try hdrs
?LINT:set d_getprotoent_r
?LINT:set getprotoent_r_proto
: see if getprotoent_r exists
set getprotoent_r d_getprotoent_r
eval $inlibc
case "$d_getprotoent_r" in
"$define")
	hdrs="$i_systypes sys/types.h $i_unistd unistd.h"
	case "$getprotoent_r_proto" in
	'')	try='extern int getprotoent_r(struct protoent*, char*, size_t, struct protoent**);'
		./protochk "$try" $hdrs && getprotoent_r_proto=I_SBWR;
	;;
	esac
	case "$getprotoent_r_proto" in
	'')	try='extern int getprotoent_r(struct protoent*, char*, int);'
		./protochk "$try" $hdrs && getprotoent_r_proto=I_SBI;
	;;
	esac
	case "$getprotoent_r_proto" in
	'')	try='extern int getprotoent_r(struct protoent*, struct protoent_data*);'
		./protochk "$try" $hdrs && getprotoent_r_proto=I_SD;
	;;
	esac
	case "$getprotoent_r_proto" in
	'') d_getprotoent_r=undef ; echo "Disabling getprotoent_r, cannot find prototype." ;;
	* ) getprotoent_r_proto="REENTRANT_PROTO_$getprotoent_r_proto" ; echo "$try" ;;
	esac
	;;
esac

