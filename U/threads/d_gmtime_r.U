?MAKE:d_gmtime_r gmtime_r_proto: Inlibc Protochk i_systypes i_unistd
?MAKE:	-pick add $@ %<
?S:d_gmtime_r:
?S:	This variable conditionally defines the HAS_GMTIME_R symbol,
?S:	which indicates to the C program that the gmtime_r()
?S:	routine is available.
?S:.
?S:gmtime_r_proto:
?S:	This variable encodes the prototype of gmtime_r.
?S:.
?C:HAS_GMTIME_R:
?C:	This symbol, if defined, indicates that the gmtime_r routine
?C:	is available to gmtime re-entrantly.
?C:.
?C:GMTIME_R_PROTO:
?C:	This symbol encodes the prototype of gmtime_r.
?C:.
?H:#$d_gmtime_r HAS_GMTIME_R	   /**/
?H:#define GMTIME_R_PROTO $gmtime_r_proto	   /**/
?H:.
?T:try hdrs
?LINT:set d_gmtime_r
?LINT:set gmtime_r_proto
: see if gmtime_r exists
set gmtime_r d_gmtime_r
eval $inlibc
case "$d_gmtime_r" in
"$define")
	hdrs="$i_systypes sys/types.h $i_unistd unistd.h"
	case "$gmtime_r_proto" in
	'')	try='extern struct tm* gmtime_r(const time_t*, struct tm*);'
		./protochk "$try" $hdrs && gmtime_r_proto=S_TS;
	;;
	esac
	case "$gmtime_r_proto" in
	'')	try='extern int gmtime_r(const time_t*, struct tm*);'
		./protochk "$try" $hdrs && gmtime_r_proto=I_TS;
	;;
	esac
	case "$gmtime_r_proto" in
	'') d_gmtime_r=undef ; echo "Disabling gmtime_r, cannot find prototype." ;;
	* ) gmtime_r_proto="REENTRANT_PROTO_$gmtime_r_proto" ; echo "$try" ;;
	esac
	;;
esac

