?RCS: $Id: d_gethostent_r.U,v 0RCS:
?RCS: Copyright (c) 2002 Jarkko Hietaniemi
?RCS:
?RCS: You may distribute under the terms of either the GNU General Public
?RCS: License or the Artistic License, as specified in the README file.
?RCS:
?RCS: Generated by the reentr.pl from the Perl 5.8 distribution.
?RCS:
?MAKE:d_gethostent_r gethostent_r_proto: Inlibc Protochk i_systypes i_netdb
?MAKE:	-pick add $@ %<
?S:d_gethostent_r:
?S:	This variable conditionally defines the HAS_GETHOSTENT_R symbol,
?S:	which indicates to the C program that the gethostent_r()
?S:	routine is available.
?S:.
?S:gethostent_r_proto:
?S:	This variable encodes the prototype of gethostent_r.
?S:.
?C:HAS_GETHOSTENT_R:
?C:	This symbol, if defined, indicates that the gethostent_r routine
?C:	is available to gethostent re-entrantly.
?C:.
?C:GETHOSTENT_R_PROTO:
?C:	This symbol encodes the prototype of gethostent_r.
?C:.
?H:#$d_gethostent_r HAS_GETHOSTENT_R	   /**/
?H:#define GETHOSTENT_R_PROTO $gethostent_r_proto	   /**/
?H:.
?T:try hdrs
?LINT:set d_gethostent_r
?LINT:set gethostent_r_proto
: see if gethostent_r exists
set gethostent_r d_gethostent_r
eval $inlibc
case "$d_gethostent_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_netdb netdb.h"
	case "$gethostent_r_proto" in
	'') try='int gethostent_r(struct hostent*, char*, size_t, struct hostent**, int*);'
	./protochk "extern $try" $hdrs && gethostent_r_proto=I_SBWRE ;;
	esac
	case "$gethostent_r_proto" in
	'') try='int gethostent_r(struct hostent*, char*, int, int*);'
	./protochk "extern $try" $hdrs && gethostent_r_proto=I_SBIE ;;
	esac
	case "$gethostent_r_proto" in
	'') try='struct hostent* gethostent_r(struct hostent*, char*, int, int*);'
	./protochk "extern $try" $hdrs && gethostent_r_proto=S_SBIE ;;
	esac
	case "$gethostent_r_proto" in
	'') try='struct hostent* gethostent_r(struct hostent*, char*, int);'
	./protochk "extern $try" $hdrs && gethostent_r_proto=S_SBI ;;
	esac
	case "$gethostent_r_proto" in
	'') try='int gethostent_r(struct hostent*, char*, int);'
	./protochk "extern $try" $hdrs && gethostent_r_proto=I_SBI ;;
	esac
	case "$gethostent_r_proto" in
	'') try='int gethostent_r(struct hostent*, struct hostent_data*);'
	./protochk "extern $try" $hdrs && gethostent_r_proto=I_SD ;;
	esac
	case "$gethostent_r_proto" in
	'')	d_gethostent_r=undef
		echo "Disabling gethostent_r, cannot determine prototype." ;;
	* )	case "$gethostent_r_proto" in
		REENTRANT_PROTO*) ;;
		*) gethostent_r_proto="REENTRANT_PROTO_$gethostent_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
esac

