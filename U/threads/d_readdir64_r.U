?RCS: $Id: d_readdir64_r.U,v 0RCS:
?RCS: Copyright (c) 2002 Jarkko Hietaniemi
?RCS:
?RCS: You may distribute under the terms of either the GNU General Public
?RCS: License or the Artistic License, as specified in the README file.
?RCS:
?RCS: Generated by the reentr.pl from the Perl 5.8 distribution.
?RCS:
?MAKE:d_readdir64_r readdir64_r_proto: Inlibc Protochk i_systypes i_dirent
?MAKE:	-pick add $@ %<
?S:d_readdir64_r:
?S:	This variable conditionally defines the HAS_READDIR64_R symbol,
?S:	which indicates to the C program that the readdir64_r()
?S:	routine is available.
?S:.
?S:readdir64_r_proto:
?S:	This variable encodes the prototype of readdir64_r.
?S:.
?C:HAS_READDIR64_R:
?C:	This symbol, if defined, indicates that the readdir64_r routine
?C:	is available to readdir64 re-entrantly.
?C:.
?C:READDIR64_R_PROTO:
?C:	This symbol encodes the prototype of readdir64_r.
?C:.
?H:#$d_readdir64_r HAS_READDIR64_R	   /**/
?H:#define READDIR64_R_PROTO $readdir64_r_proto	   /**/
?H:.
?T:try hdrs
?LINT:set d_readdir64_r
?LINT:set readdir64_r_proto
: see if readdir64_r exists
set readdir64_r d_readdir64_r
eval $inlibc
case "$d_readdir64_r" in
"$define")
	hdrs="$i_systypes sys/types.h define stdio.h $i_dirent dirent.h"
	case "$readdir64_r_proto" in
	'') try='int readdir64_r(DIR*, struct dirent64*, struct dirent64**);'
	./protochk "extern $try" $hdrs && readdir64_r_proto=I_TSR ;;
	esac
	case "$readdir64_r_proto" in
	'') try='int readdir64_r(DIR*, struct dirent64*);'
	./protochk "extern $try" $hdrs && readdir64_r_proto=I_TS ;;
	esac
	case "$readdir64_r_proto" in
	'')	d_readdir64_r=undef
		echo "Disabling readdir64_r, cannot determine prototype." ;;
	* )	case "$readdir64_r_proto" in
		REENTRANT_PROTO*) ;;
		*) readdir64_r_proto="REENTRANT_PROTO_$readdir64_r_proto" ;;
		esac
		echo "Prototype: $try" ;;
	esac
	;;
esac

