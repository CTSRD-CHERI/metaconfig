?MAKE:d_readdir_r readdir_r_proto: Inlibc Protochk i_systypes i_unistd
?MAKE:	-pick add $@ %<
?S:d_readdir_r:
?S:	This variable conditionally defines the HAS_READDIR_R symbol,
?S:	which indicates to the C program that the readdir_r()
?S:	routine is available.
?S:.
?S:readdir_r_proto:
?S:	This variable encodes the prototype of readdir_r.
?S:.
?C:HAS_READDIR_R:
?C:	This symbol, if defined, indicates that the readdir_r routine
?C:	is available to readdir re-entrantly.
?C:.
?C:READDIR_R_PROTO:
?C:	This symbol encodes the prototype of readdir_r.
?C:.
?H:#$d_readdir_r HAS_READDIR_R	   /**/
?H:#define READDIR_R_PROTO $readdir_r_proto	   /**/
?H:.
?T:try hdrs
?LINT:set d_readdir_r
?LINT:set readdir_r_proto
: see if readdir_r exists
set readdir_r d_readdir_r
eval $inlibc
case "$d_readdir_r" in
"$define")
	hdrs="$i_systypes sys/types.h $i_unistd unistd.h"
	case "$readdir_r_proto" in
	'')	try='extern int readdir_r(DIR*, struct dirent*, struct dirent**);'
		./protochk "$try" $hdrs && readdir_r_proto=I_TSR;
	;;
	esac
	case "$readdir_r_proto" in
	'')	try='extern int readdir_r(DIR*, struct dirent*);'
		./protochk "$try" $hdrs && readdir_r_proto=I_TS;
	;;
	esac
	case "$readdir_r_proto" in
	'') d_readdir_r=undef ; echo "Disabling readdir_r, cannot find prototype." ;;
	* ) readdir_r_proto="REENTRANT_PROTO_$readdir_r_proto" ; echo "$try" ;;
	esac
	;;
esac

