?MAKE:d_setpwent_r setpwent_r_proto: Inlibc Protochk i_systypes i_dirent
?MAKE:  -pick add $@ %<
?S:d_setpwent_r:
?S:     This variable conditionally defines the HAS_SETPWENT_R symbol,
?S:     which indicates to the C program that the setpwent_r()
?S:     routine is available.
?S:.
?S:setpwent_r_proto:
?S:     This variable encodes the prototype of setpwent_r.
?S:.
?C:HAS_SETPWENT_R:
?C:     This symbol, if defined, indicates that the setpwent_r routine
?C:     is available to setpwent re-entrantly.
?C:.
?C:SETPWENT_R_PROTO:
?C:     This symbol encodes the prototype of setpwent_r.
?C:.
?H:#$d_setpwent_r HAS_SETPWENT_R          /**/
?H:#define SETPWENT_R_PROTO $setpwent_r_proto     /**/
?H:.
?T:try hdrs
?LINT:set d_setpwent_r
?LINT:set setpwent_r_proto
: see if setpwent_r exists
set setpwent_r d_setpwent_r
eval $inlibc
case "$d_setpwent_r" in
"$define")
	hdrs="$i_systypes sys/types.h ${i}_pwd pwd.h"
	case "$setpwent_r_proto" in
	'')	try='extern int setpwent_r(FILE**);'
		./protochk "$try" $hdrs && setpwent_r_proto=I_H;
	;;
	esac
	case "$setpwent_r_proto" in
	'')	try='extern void setpwent_r(FILE**);'
		./protochk "$try" $hdrs && setpwent_r_proto=V_H;
	;;
	esac
	case "$setpwent_r_proto" in
	'') d_setpwent_r=undef ; echo "Disabling setpwent_r, cannot find prototype." ;;
	* ) setpwent_r_proto="REENTRANT_$setpwent_r_proto" ; echo "$try" ;;
	esac
	;;
esac

