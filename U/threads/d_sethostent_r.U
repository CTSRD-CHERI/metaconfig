?MAKE:d_sethostent_r sethostent_r_proto: Inlibc Protochk i_systypes i_dirent
?MAKE:  -pick add $@ %<
?S:d_sethostent_r:
?S:     This variable conditionally defines the HAS_SETHOSTENT_R symbol,
?S:     which indicates to the C program that the sethostent_r()
?S:     routine is available.
?S:.
?S:sethostent_r_proto:
?S:     This variable encodes the prototype of sethostent_r.
?S:.
?C:HAS_SETHOSTENT_R:
?C:     This symbol, if defined, indicates that the sethostent_r routine
?C:     is available to sethostent re-entrantly.
?C:.
?C:SETHOSTENT_R_PROTO:
?C:     This symbol encodes the prototype of sethostent_r.
?C:.
?H:#$d_sethostent_r HAS_SETHOSTENT_R          /**/
?H:#define SETHOSTENT_R_PROTO $sethostent_r_proto     /**/
?H:.
?T:try hdrs
?LINT:set d_sethostent_r
?LINT:set sethostent_r_proto
: see if sethostent_r exists
set sethostent_r d_sethostent_r
eval $inlibc
case "$d_sethostent_r" in
"$define")
	hdrs="$i_systypes sys/types.h ${i}_netdb netdb.h"
	case "$sethostent_r_proto" in
	'')	try='extern int sethostent_r(int, struct hostent_data*);'
		./protochk "$try" $hdrs && sethostent_r_proto=I_IS;
	;;
	esac
	case "$sethostent_r_proto" in
	'') d_sethostent_r=undef ; echo "Disabling sethostent_r, cannot find prototype." ;;
	* ) sethostent_r_proto="REENTRANT_$sethostent_r_proto" ; echo "$try" ;;
	esac
	;;
esac

