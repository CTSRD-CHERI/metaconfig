?MAKE:d_strerror_r strerror_r_proto: Inlibc Protochk i_systypes i_dirent
?MAKE:  -pick add $@ %<
?S:d_strerror_r:
?S:     This variable conditionally defines the HAS_STRERROR_R symbol,
?S:     which indicates to the C program that the strerror_r()
?S:     routine is available.
?S:.
?S:strerror_r_proto:
?S:     This variable encodes the prototype of strerror_r.
?S:.
?C:HAS_STRERROR_R:
?C:     This symbol, if defined, indicates that the strerror_r routine
?C:     is available to strerror re-entrantly.
?C:.
?C:STRERROR_R_PROTO:
?C:     This symbol encodes the prototype of strerror_r.
?C:.
?H:#$d_strerror_r HAS_STRERROR_R          /**/
?H:#define STRERROR_R_PROTO $strerror_r_proto     /**/
?H:.
?T:try hdrs
?LINT:set d_strerror_r
?LINT:set strerror_r_proto
: see if strerror_r exists
set strerror_r d_strerror_r
eval $inlibc
case "$d_strerror_r" in
"$define")
	hdrs="$i_systypes sys/types.h ${i}_string string.h"
	case "$strerror_r_proto" in
	'')	try='extern int strerror_r(int, char*, size_t);'
		./protochk "$try" $hdrs && strerror_r_proto=I_IBW;
	;;
	esac
	case "$strerror_r_proto" in
	'')	try='extern char* strerror_r(int, char*, size_t);'
		./protochk "$try" $hdrs && strerror_r_proto=B_IBW;
	;;
	esac
	case "$strerror_r_proto" in
	'') d_strerror_r=undef ; echo "Disabling strerror_r, cannot find prototype." ;;
	* ) strerror_r_proto="REENTRANT_$strerror_r_proto" ; echo "$try" ;;
	esac
	;;
esac

